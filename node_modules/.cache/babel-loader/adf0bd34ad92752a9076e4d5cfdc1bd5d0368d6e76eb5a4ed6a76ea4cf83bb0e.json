{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Link,useLocation}from\"react-router-dom\";import\"./resultchatbot.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ResultChatbot=()=>{var _location$state,_location$state2,_location$state3,_location$state4,_location$state5,_location$state6;const location=useLocation();// Extract data from navigation state\nconst result=((_location$state=location.state)===null||_location$state===void 0?void 0:_location$state.predictedCondition)||\"No result available\";const patientName=((_location$state2=location.state)===null||_location$state2===void 0?void 0:_location$state2.patientName)||\"Unknown\";const age=((_location$state3=location.state)===null||_location$state3===void 0?void 0:_location$state3.age)||\"Unknown\";const patientLocation=((_location$state4=location.state)===null||_location$state4===void 0?void 0:_location$state4.location)||\"Unknown\";const uploadedImage=((_location$state5=location.state)===null||_location$state5===void 0?void 0:_location$state5.uploadedImage)||null;const annotatedImage=((_location$state6=location.state)===null||_location$state6===void 0?void 0:_location$state6.annotatedImage)||\"\";const[chatOpen,setChatOpen]=useState(false);const[message,setMessage]=useState(\"\");const[messages,setMessages]=useState([]);// Function to send a message to the chatbot\nconst handleSendMessage=async()=>{if(message.trim()!==\"\"){const newMessages=[...messages,{text:message,sender:\"user\"}];setMessages(newMessages);setMessage(\"\");try{const response=await fetch(\"https://cardio-guard-backend.onrender.com/chatbot\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({user_input:message,prediction_result:result// Sending the predicted result to the chatbot\n})});const data=await response.json();if(data.response){setMessages([...newMessages,{text:data.response,sender:\"bot\"}]);}else{setMessages([...newMessages,{text:\"Error: No response from chatbot.\",sender:\"bot\"}]);}}catch(error){console.error(\"Error:\",error);setMessages([...newMessages,{text:\"Error connecting to chatbot.\",sender:\"bot\"}]);}}};const resultColor=result.toLowerCase()===\"normal\"?\"green\":\"red\";return/*#__PURE__*/_jsxs(\"div\",{className:\"result-container\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"title1\",children:\"PREDICTION RESULT\"}),/*#__PURE__*/_jsx(\"p\",{className:\"result-text\",style:{color:resultColor},children:/*#__PURE__*/_jsx(\"strong4\",{children:result})}),/*#__PURE__*/_jsx(\"h3\",{className:\"title2\",children:\"PATIENT DETAILS\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Name :\"}),\" \",/*#__PURE__*/_jsx(\"strong2\",{children:patientName})]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Age :\"}),\" \",/*#__PURE__*/_jsx(\"strong2\",{children:age})]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Location :\"}),\" \",/*#__PURE__*/_jsx(\"strong2\",{children:patientLocation})]}),annotatedImage&&/*#__PURE__*/_jsxs(\"div\",{className:\"image-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:/*#__PURE__*/_jsx(\"strong3\",{children:\"Annotated MRI Scan\"})}),/*#__PURE__*/_jsx(\"img\",{src:`data:image/png;base64,${annotatedImage}`,alt:\"Annotated MRI\",className:\"annotated-image\"})]}),/*#__PURE__*/_jsx(Link,{to:\"/report\",state:{patientName,age,location:patientLocation,uploadedImage,predictedCondition:result,annotatedImage},children:/*#__PURE__*/_jsx(\"button\",{className:\"butn\",children:\"Generate Report\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"chatbot-icon\",onClick:()=>setChatOpen(!chatOpen),children:\"\\uD83D\\uDCAC Chat\"}),/*#__PURE__*/_jsxs(\"div\",{className:`chatbot-slider ${chatOpen?\"open\":\"\"}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Chatbot\"}),/*#__PURE__*/_jsx(\"button\",{className:\"close-btn\",onClick:()=>setChatOpen(false),children:\"\\u2716\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chatbot-body\",children:messages.map((msg,index)=>/*#__PURE__*/_jsx(\"p\",{className:`chat-message ${msg.sender}`,children:msg.text},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-footer\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Ask something...\",value:message,onChange:e=>setMessage(e.target.value),className:\"chat-input\"}),/*#__PURE__*/_jsx(\"button\",{className:\"send-btn\",onClick:handleSendMessage,children:\"Send\"})]})]})]});};export default ResultChatbot;","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","jsx","_jsx","jsxs","_jsxs","ResultChatbot","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","_location$state6","location","result","state","predictedCondition","patientName","age","patientLocation","uploadedImage","annotatedImage","chatOpen","setChatOpen","message","setMessage","messages","setMessages","handleSendMessage","trim","newMessages","text","sender","response","fetch","method","headers","body","JSON","stringify","user_input","prediction_result","data","json","error","console","resultColor","toLowerCase","className","children","style","color","src","alt","to","onClick","map","msg","index","type","placeholder","value","onChange","e","target"],"sources":["/Users/akash/Documents/GitHub/AKASH-M-V-ML-PROJECTS/Cardio-Guard-Frontend/src/components/resultchatbot/resultchatbot.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport \"./resultchatbot.css\";\n\nconst ResultChatbot = () => {\n    const location = useLocation();\n    \n    // Extract data from navigation state\n    const result = location.state?.predictedCondition || \"No result available\";\n    const patientName = location.state?.patientName || \"Unknown\";\n    const age = location.state?.age || \"Unknown\";\n    const patientLocation = location.state?.location || \"Unknown\";\n    const uploadedImage = location.state?.uploadedImage || null;\n    const annotatedImage = location.state?.annotatedImage || \"\";\n\n    const [chatOpen, setChatOpen] = useState(false);\n    const [message, setMessage] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n\n    // Function to send a message to the chatbot\n    const handleSendMessage = async () => {\n        if (message.trim() !== \"\") {\n            const newMessages = [...messages, { text: message, sender: \"user\" }];\n            setMessages(newMessages);\n            setMessage(\"\");\n    \n            try {\n                const response = await fetch(\"https://cardio-guard-backend.onrender.com/chatbot\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        user_input: message,\n                        prediction_result: result,  // Sending the predicted result to the chatbot\n                    }),\n                });\n    \n                const data = await response.json();\n    \n                if (data.response) {\n                    setMessages([...newMessages, { text: data.response, sender: \"bot\" }]);\n                } else {\n                    setMessages([...newMessages, { text: \"Error: No response from chatbot.\", sender: \"bot\" }]);\n                }\n            } catch (error) {\n                console.error(\"Error:\", error);\n                setMessages([...newMessages, { text: \"Error connecting to chatbot.\", sender: \"bot\" }]);\n            }\n        }\n    };\n    \n    const resultColor = result.toLowerCase() === \"normal\" ? \"green\" : \"red\";\n\n    return (\n        <div className=\"result-container\">\n            <h2 className=\"title1\">PREDICTION RESULT</h2>\n            <p className=\"result-text\" style={{ color: resultColor }}>\n                <strong4>{result}</strong4>\n            </p>\n\n            <h3 className=\"title2\">PATIENT DETAILS</h3>\n            <p><strong>Name :</strong> <strong2>{patientName}</strong2></p>\n            <p><strong>Age :</strong> <strong2>{age}</strong2></p>\n            <p><strong>Location :</strong> <strong2>{patientLocation}</strong2></p>\n\n            \n\n            {/* Show Annotated Image (if available) */}\n            {annotatedImage && (\n                <div className=\"image-container\">\n                    <h3><strong3>Annotated MRI Scan</strong3></h3>\n                    <img src={`data:image/png;base64,${annotatedImage}`} alt=\"Annotated MRI\" className=\"annotated-image\" />\n                </div>\n            )}\n\n            {/* Button to Navigate to Report Page */}\n            <Link to=\"/report\" state={{\n                patientName,\n                age,\n                location: patientLocation,\n                uploadedImage, \n                predictedCondition: result, \n                annotatedImage\n            }}>\n                <button className=\"butn\">Generate Report</button>\n            </Link>\n\n            {/* Chatbot UI */}\n            <div className=\"chatbot-icon\" onClick={() => setChatOpen(!chatOpen)}>\n                ðŸ’¬ Chat\n            </div>\n\n            <div className={`chatbot-slider ${chatOpen ? \"open\" : \"\"}`}>\n                <div className=\"chatbot-header\">\n                    <h3>Chatbot</h3>\n                    <button className=\"close-btn\" onClick={() => setChatOpen(false)}>âœ–</button>\n                </div>\n                <div className=\"chatbot-body\">\n                    {messages.map((msg, index) => (\n                        <p key={index} className={`chat-message ${msg.sender}`}>\n                            {msg.text}\n                        </p>\n                    ))}\n                </div>\n                <div className=\"chatbot-footer\">\n                    <input \n                        type=\"text\" \n                        placeholder=\"Ask something...\" \n                        value={message} \n                        onChange={(e) => setMessage(e.target.value)} \n                        className=\"chat-input\"\n                    />\n                    <button className=\"send-btn\" onClick={handleSendMessage}>Send</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ResultChatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}